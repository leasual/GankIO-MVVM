name: iOS Test Build
on:
  workflow_dispatch:
    inputs:
      buildBranch:
        description: 'Input which branch to build (develop/main/hotfix)'
        required: true
        default: 'main'
      buildVersionOrTag:
        description: 'Specify version only when you want to increment the minor and major version (e.g. 1.0.0)'
        required: true
        default: '1.0.0'
      uploadCloud:
        description: 'Upload apk to Pgyer (true/false)'
        required: true
        default: 'true'

env: 
  APPLEID_USERNAME: ${{ secrets.APPLE_ID }}
  APPLEID_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  XC_PROJECT: "GankIO-MVVM"
  IOS_KEYS: ${{ secrets.IOS_KEYS }}

jobs:
  build-ios-test:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.buildBranch }}

      - name: Prepear variable for build
        id: variable
        env:
          NUM: ${{ github.run_number }}
        run: |
          echo "::set-output name=code::$NUM"
          plist_path="${{ github.workspace }}/${{ github.event.repository.name }}/Info.plist"
          echo "::set-output name=info_plist_path::$plist_path"
          build_number=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" ${plist_path})
          build_number=$((${build_number} + 1))
          echo "::set-output name=number::$build_number"
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion ${build_number}" ${plist_path}
          expr $build_number > buildNumber.txt
          build_number_path="${{ github.workspace }}/buildNumber.txt"
          echo "::set-output name=build_number::$build_number_path"
          ls -l

      - name: Upload info plist
        uses: actions/upload-artifact@v2
        with:
          name: Info
          path: |
            ${{ steps.variable.outputs.info_plist_path }}
            ${{ steps.variable.outputs.build_number }}
      # - name: Upload build number
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: BuildNumber
      #     path: |
      #       ${{ steps.variable.outputs.build_number_path }}
      # - name: Update Info.plist
      #   uses: damienaicheh/update-ios-version-info-plist-action@v1.0.0
      #   with:
      #     info-plist-path: ${{ steps.variable.outputs.info_plist_path }}
      #     bundle-short-version-string: ${{ github.event.inputs.buildVersionOrTag }}
      #     bundle-version: ${{ steps.variable.outputs.code }}
      #     print-file: true

      # - name: Install pod
      #   run: |
      #     pod install --repo-update --clean-install

      # - name: Cache Cocoapods
      #   uses: actions/cache@v2
      #   with:
      #     path: Pods
      #     key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pods-
      
      # - name: Install gpg
      #   run: |
      #     brew install gnupg

      # - name: Setup provisioning profile
      #   run: |
      #     gpg --quiet --batch --yes --decrypt --passphrase="$IOS_KEYS" --output .github/secrets/gank.mobileprovision .github/secrets/gank.mobileprovision.gpg
      #     gpg --quiet --batch --yes --decrypt --passphrase="$IOS_KEYS" --output .github/secrets/gank.p12 .github/secrets/gank.p12.gpg
      #     ls -l
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

      #     cp .github/secrets/gank.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/dan_release.mobileprovision


      #     security create-keychain -p "123456" build.keychain
      #     security import .github/secrets/gank.p12 -t agg -k ~/Library/Keychains/build.keychain -P "123456" -A

      #     security list-keychains -s ~/Library/Keychains/build.keychain
      #     security default-keychain -s ~/Library/Keychains/build.keychain
      #     security unlock-keychain -p "" ~/Library/Keychains/build.keychain

      #     security set-key-partition-list -S apple-tool:,apple: -s -k "123456" ~/Library/Keychains/build.keychain

      # - name: Archive App
      #   run: |
      #     ls -l
      #     xcodebuild -workspace $XC_PROJECT.xcworkspace \
      #       -scheme $XC_PROJECT \
      #       -sdk iphoneos \
      #       -configuration AppStoreDistribution \
      #       -archivePath $PWD/build/$XC_PROJECT.xcarchive \
      #       clean archive | xcpretty

      # #/usr/bin/xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportOptionsPlist "$SRCROOT/ExportOptions.plist" -exportPath "$EXPORT_PATH"
      # - name: Export IPA
      #   run: |
      #     xcodebuild -archivePath $PWD/build/$XC_PROJECT.xcarchive \
      #       -exportOptionsPlist ExportOptions.plist \
      #       -exportPath $PWD/build \
      #       -allowProvisioningUpdates \
      #       -exportArchive | xcpretty

      # - name: Publish To TestFlight
      #   if: success()
      #   run: |
      #     xcrun altool --upload-app -t ios -f build/$XC_PROJECT.ipa -u "$APPLEID_USERNAME" -p "$APPLEID_PASSWORD" --verbose

  update-changelog:
    needs: build-ios-test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.buildBranch }}

      - name: Prepear variable for changelog
        id: variable
        env:
          NUM: ${{ github.run_number }}
        run: |
          echo "::set-output name=code::$NUM"
          echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M')"
          url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/${{ github.event.inputs.buildBranch }}/CHANGELOG.md"
          echo "::set-output name=changelog_url::$url"
          echo "::set-output name=branch::${{ github.event.inputs.buildBranch }}"

      - name: Download info plist
        uses: actions/download-artifact@v2
        with:
          name: Info
      
      # - name: Download build number
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: BuildNumber

      - name: Get commit id and message
        id: lastest_commit
        run: |
          ls -l
          cat buildNumber.txt
          echo "name=${{ github.event.repository.name }}"
          echo "name=${{ github.event.repository.full_name }}"
          lastest_commit_message="$(git log -1 --format=%B)"
          lastest_commit_id="$(git log -1 --format=%H)"
          init_commit_id="$(git rev-list --max-parents=0 HEAD)"
          if [ ! -f release-last-commit.md ]
          then
            touch release-last-commit.md
            last_commit_id=$init_commit_id
          else
            last_commit_id="$(cat release-last-commit.txt)"
          fi
          echo "::set-output name=message::$lastest_commit_message"
          echo "::set-output name=id::$lastest_commit_id"
          echo "::set-output name=init_id::$init_commit_id"
          echo "::set-output name=last_id::$last_commit_id"
          build_number="$(cat buildNumber.txt)"
          echo "::set-output name=number::$build_number"
      - shell: bash
        run: |
          echo "${{ steps.lastest_commit.outputs.id }}"
          expr ${{ steps.lastest_commit.outputs.id }} > release-last-commit.txt
      - name: Backup changelog
        if: hashFiles('CHANGELOG.md') != ''
        run: |
          mv CHANGELOG.md CHANGELOG_backup.md
      - name: Generate a changelog without header and footer
        if: hashFiles('CHANGELOG_backup.md') != ''
        uses: orhun/git-cliff-action@v1
        with:
          config: .github/cliff.toml
          args: --verbose ${{ steps.lastest_commit.outputs.last_id }}..HEAD --tag ${{ github.event.inputs.buildVersionOrTag }}(${{ steps.lastest_commit.outputs.number }})-beta --strip header
        env:
          OUTPUT: CHANGELOG_commit.md

      - name: Append history changelog
        if: hashFiles('CHANGELOG_backup.md') != ''
        run: |
          sed '3r CHANGELOG_commit.md' CHANGELOG_backup.md > CHANGELOG_lastest.md
          rm CHANGELOG_backup.md CHANGELOG_commit.md
          mv CHANGELOG_lastest.md CHANGELOG.md
          echo "$(cat CHANGELOG.md)"
      
      - name: Generate a changelog with header and footer
        if: hashFiles('CHANGELOG.md') == ''
        uses: orhun/git-cliff-action@v1
        with:
          config: .github/cliff.toml
          args: --verbose ${{ steps.lastest_commit.outputs.last_id }}..HEAD --tag ${{ github.event.inputs.buildVersionOrTag }}(${{ steps.lastest_commit.outputs.number }})-beta
        env:
          OUTPUT: CHANGELOG.md 

      - uses: EndBug/add-and-commit@v7
        with:
          message: "ci: update changelog to ${{ github.event.inputs.buildVersionOrTag }}(${{ steps.lastest_commit.outputs.number }})-beta"
          default_author: github_actions
          branch: ${{ github.event.inputs.buildBranch }}
          add: 'release-last-commit.txt CHANGELOG.md ${{ github.event.repository.name }}/Info.plist'
          # tag: '${{ github.event.inputs.buildVersionOrTag }} --force'

      #{"msgtype": "markdown","markdown": {"content": "Application daily build update:\n>Project:<font color=\"comment\">Project</font>>Branch:<font color=\"comment\">Branch</font>>Build Status:<font color=\"warning\">Success</font>\n>Platform:<font color=\"comment\">Platform</font>\n>Version:<font color=\"comment\">Version</font>\n>Changelog Url:<font color=\"comment\">Changelog</font>\n>Download Url:<font color=\"comment\">Download</font>\n>When:<font color=\"comment\">When</font>", "mentioned_list":["@all"]}}
     - name: On success to send notification to wechat
        if: success()
        run: |
          curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${{ secrets.WECHAT_NOTIFICATION_KEY }}' -H 'Content-Type: application/json' -d "{\"msgtype\": \"markdown\",\"markdown\": {\"content\": \"Application daily build update:\\n>Project:<font color=\\\"warning\\\">${{ github.event.repository.name }}</font>\\n>Branch:<font color=\\\"warning\\\">${{ steps.variable.outputs.branch }}</font>\\n>Build Status:<font color=\\\"warning\\\">Success</font>\\n>Platform:<font color=\\\"warning\\\">iOS</font>\\n>Version:<font color=\\\"warning\\\">${{ github.event.inputs.buildVersionOrTag }}(${{ steps.variable.outputs.code }})</font>\\n>Changelog Url:<font color=\\\"comment\\\">[click this](${{ steps.variable.outputs.changelog_url }})</font>\\n>Download Url:<font color=\\\"comment\\\">[click this](itms-beta://testflight.apple.com/join/)</font>\\n>When:<font color=\\\"warning\\\">${{ steps.variable.outputs.date }}</font>\", \"mentioned_list\":[\"@all\"]}}"
      - name: On failure to send notification to wechat
        if: failure()
        run: |
          curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${{ secrets.WECHAT_NOTIFICATION_KEY }}' -H 'Content-Type: application/json' -d "{\"msgtype\": \"markdown\",\"markdown\": {\"content\": \"Application daily build update:\\n>Project:<font color=\\\"warning\\\">${{ github.event.repository.name }}</font>\\n>Branch:<font color=\\\"warning\\\">${{ steps.variable.outputs.branch }}</font>\\n>Build Status:<font color=\\\"warning\\\">Faiure</font>\\n>Platform:<font color=\\\"warning\\\">iOS</font>\\n>Version:<font color=\\\"warning\\\">${{ github.event.inputs.buildVersionOrTag }}(${{ steps.variable.outputs.code }})</font>\\n>Changelog Url:<font color=\\\"comment\\\">[click this](${{ steps.variable.outputs.changelog_url }})</font>\\n>Download Url:<font color=\\\"comment\\\">[click this](itms-beta://testflight.apple.com/join/)</font>\\n>When:<font color=\\\"warning\\\">${{ steps.variable.outputs.date }}</font>\", \"mentioned_list\":[\"@all\"]}}"
