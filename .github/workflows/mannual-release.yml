name: iOS Release Build
on:
  workflow_dispatch:
    inputs:
      # buildBranch:
      #   description: 'Input which branch to build (develop/main/hotfix)'
      #   required: false
      #   default: 'main'
      buildVersionOrTag:
        description: 'Specify version only when you want to increment the minor and major version (e.g. 1.0.0)'
        required: true
        default: '1.0.0'
      # uploadCloud:
      #   description: 'Upload apk to Pgyer (true/false)'
      #   required: true
      #   default: 'true'

env: 
  APPLEID_USERNAME: ${{ secrets.APPLE_ID }}
  APPLEID_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  XC_PROJECT: "GankIO-MVVM"
  IOS_KEYS: ${{ secrets.IOS_KEYS }}

jobs:
  build-ios-test:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare variable for build
        id: variable
        env:
          NUM: ${{ github.run_number }}
        run: |
          echo "::set-output name=code::$NUM"
          plist_path="${{ github.workspace }}/${{ github.event.repository.name }}/Info.plist"
          echo "::set-output name=info_plist_path::$plist_path"
          build_number=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" ${plist_path})
          build_number=$((${build_number} + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $build_number" ${plist_path}
          build_version=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" ${plist_path})
          /usr/libexec/PlistBuddy -c "Set CFBundleShortVersionString ${{ github.event.inputs.buildVersionOrTag }}" ${plist_path}
          expr $build_number > buildNumber.txt
          build_number_path="${{ github.workspace }}/buildNumber.txt"
          echo "::set-output name=build_number::$build_number_path"
          ls -l

      - name: Upload info plist
        uses: actions/upload-artifact@v2
        with:
          name: Info
          path: |
            ${{ steps.variable.outputs.info_plist_path }}
            ${{ steps.variable.outputs.build_number }}

      - name: Install pod
        run: |
          pod install --repo-update --clean-install

      # - name: Cache Cocoapods
      #   uses: actions/cache@v2
      #   with:
      #     path: Pods
      #     key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pods-
      
      # - name: Install gpg
      #   run: |
      #     brew install gnupg

      # - name: Setup provisioning profile
      #   run: |
      #     gpg --quiet --batch --yes --decrypt --passphrase="$IOS_KEYS" --output .github/secrets/gank.mobileprovision .github/secrets/gank.mobileprovision.gpg
      #     gpg --quiet --batch --yes --decrypt --passphrase="$IOS_KEYS" --output .github/secrets/gank.p12 .github/secrets/gank.p12.gpg
      #     ls -l
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

      #     cp .github/secrets/gank.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/dan_release.mobileprovision


      #     security create-keychain -p "123456" build.keychain
      #     security import .github/secrets/gank.p12 -t agg -k ~/Library/Keychains/build.keychain -P "123456" -A

      #     security list-keychains -s ~/Library/Keychains/build.keychain
      #     security default-keychain -s ~/Library/Keychains/build.keychain
      #     security unlock-keychain -p "" ~/Library/Keychains/build.keychain

      #     security set-key-partition-list -S apple-tool:,apple: -s -k "123456" ~/Library/Keychains/build.keychain

      # - name: Archive App
      #   run: |
      #     ls -l
      #     xcodebuild -workspace $XC_PROJECT.xcworkspace \
      #       -scheme $XC_PROJECT \
      #       -sdk iphoneos \
      #       -configuration AppStoreDistribution \
      #       -archivePath $PWD/build/$XC_PROJECT.xcarchive \
      #       clean archive | xcpretty

      # #/usr/bin/xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportOptionsPlist "$SRCROOT/ExportOptions.plist" -exportPath "$EXPORT_PATH"
      # - name: Export IPA
      #   run: |
      #     xcodebuild -archivePath $PWD/build/$XC_PROJECT.xcarchive \
      #       -exportOptionsPlist ExportOptions.plist \
      #       -exportPath $PWD/build \
      #       -allowProvisioningUpdates \
      #       -exportArchive | xcpretty

      # - name: Publish To TestFlight
      #   if: success()
      #   run: |
      #     xcrun altool --upload-app -t ios -f build/$XC_PROJECT.ipa -u "$APPLEID_USERNAME" -p "$APPLEID_PASSWORD" --verbose

  update-changelog:
    needs: build-ios-test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepear variable for changelog
        id: variable
        env:
          NUM: ${{ github.run_number }}
        run: |
          echo "::set-output name=code::$NUM"
          echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M')"
          if [ ! -f CHANGELOG.md ];then
            touch CHANGELOG.md
          fi
          url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/${GITHUB_REF##*/}/CHANGELOG.md"
          echo "::set-output name=changelog_url::$url"
          echo "::set-output name=branch::${GITHUB_REF##*/}"

      - name: Download info plist
        uses: actions/download-artifact@v2
        with:
          name: Info

      - name: generate build number
        id: lastest_commit
        run: |
          ls -l
          cat buildNumber.txt
          build_number="$(cat buildNumber.txt)"
          echo "::set-output name=number::$build_number"
          git tag ${{ github.event.inputs.buildVersionOrTag }}
      # - name: Bump tag version
      #   id: tag
      #   uses: mathieudutour/github-tag-action@v5.6
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     custom_tag: ${{ github.event.inputs.buildVersionOrTag }}
      #     dry_run: true
      
      - name: Generate a changelog
        id: git-cliff
        uses: orhun/git-cliff-action@v1
        with:
          config: .github/cliff.toml
          args: --verbose --tag ${{ github.event.inputs.buildVersionOrTag }}
        env:
          OUTPUT: CHANGELOG.md 

      - uses: EndBug/add-and-commit@v7
        with:
          message: "ci: update changelog to ${{ github.event.inputs.buildVersionOrTag }}(${{ steps.lastest_commit.outputs.number }})"
          default_author: github_actions
          branch: ${{ github.event.inputs.buildBranch }}
          add: 'CHANGELOG.md ${{ github.event.repository.name }}/Info.plist'
          tag: '${{ github.event.inputs.buildVersionOrTag }} --force'

      #{"msgtype": "markdown","markdown": {"content": "Application daily build update:\n>Project:<font color=\"comment\">Project</font>>Branch:<font color=\"comment\">Branch</font>>Build Status:<font color=\"warning\">Success</font>\n>Platform:<font color=\"comment\">Platform</font>\n>Version:<font color=\"comment\">Version</font>\n>Changelog Url:<font color=\"comment\">Changelog</font>\n>Download Url:<font color=\"comment\">Download</font>\n>When:<font color=\"comment\">When</font>", "mentioned_list":["@all"]}}
      - name: On success to send notification to wechat
        if: success()
        run: |
          curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${{ secrets.WECHAT_NOTIFICATION_KEY }}' -H 'Content-Type: application/json' -d "{\"msgtype\": \"markdown\",\"markdown\": {\"content\": \"Application daily build update:\\n>Project:<font color=\\\"warning\\\">${{ github.event.repository.name }}</font>\\n>Branch:<font color=\\\"warning\\\">${{ steps.variable.outputs.branch }}</font>\\n>Build Status:<font color=\\\"warning\\\">Success</font>\\n>Platform:<font color=\\\"warning\\\">iOS</font>\\n>Version:<font color=\\\"warning\\\">${{ github.event.inputs.buildVersionOrTag }}(${{ steps.lastest_commit.outputs.number }})</font>\\n>Changelog Url:<font color=\\\"comment\\\">[click this](${{ steps.variable.outputs.changelog_url }})</font>\\n>Download Url:<font color=\\\"comment\\\">[click this](itms-beta://testflight.apple.com/join/)</font>\\n>When:<font color=\\\"warning\\\">${{ steps.variable.outputs.date }}</font>\", \"mentioned_list\":[\"@all\"]}}"
      - name: On failure to send notification to wechat
        if: failure()
        run: |
          curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${{ secrets.WECHAT_NOTIFICATION_KEY }}' -H 'Content-Type: application/json' -d "{\"msgtype\": \"markdown\",\"markdown\": {\"content\": \"Application daily build update:\\n>Project:<font color=\\\"warning\\\">${{ github.event.repository.name }}</font>\\n>Branch:<font color=\\\"warning\\\">${{ steps.variable.outputs.branch }}</font>\\n>Build Status:<font color=\\\"warning\\\">Faiure</font>\\n>Platform:<font color=\\\"warning\\\">iOS</font>\\n>Version:<font color=\\\"warning\\\">${{ github.event.inputs.buildVersionOrTag }}(${{ steps.lastest_commit.outputs.number }})</font>\\n>Changelog Url:<font color=\\\"comment\\\">[click this](${{ steps.variable.outputs.changelog_url }})</font>\\n>Download Url:<font color=\\\"comment\\\">[click this](itms-beta://testflight.apple.com/join/)</font>\\n>When:<font color=\\\"warning\\\">${{ steps.variable.outputs.date }}</font>\", \"mentioned_list\":[\"@all\"]}}"
